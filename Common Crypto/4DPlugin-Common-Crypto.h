/* --------------------------------------------------------------------------------
 #
 #	4DPlugin-Common-Crypto.h
 #	source generated by 4D Plugin Wizard
 #	Project : Common Crypto
 #	author : miyako
 #	2019/08/16
 #
 # --------------------------------------------------------------------------------*/

#ifndef PLUGIN_COMMON_CRYPTO_H
#define PLUGIN_COMMON_CRYPTO_H

#include "4DPluginAPI.h"

#include "openssl/ssl.h"
#include "openssl/bio.h"
#include "openssl/evp.h"
#include "openssl/buffer.h"
#include "openssl/hmac.h"
#include "openssl/pkcs12.h"
#include "openssl/err.h"

//#include "openssl/kdf.h"

#include "C_TEXT.h"
#include "C_BLOB.h"
#include "C_LONGINT.h"

#pragma mark -

void PEM_From_P12(PA_PluginParameters params);
void Get_timestamp(PA_PluginParameters params);
void Get_timestring(PA_PluginParameters params);
void Get_unixtime(PA_PluginParameters params);
void MD5(PA_PluginParameters params);
void RIPEMD160(PA_PluginParameters params);
void SHA1(PA_PluginParameters params);
void SHA224(PA_PluginParameters params);
void SHA256(PA_PluginParameters params);
void SHA384(PA_PluginParameters params);
void SHA512(PA_PluginParameters params);
void SHA512_224(PA_PluginParameters params);
void SHA512_256(PA_PluginParameters params);
void RSASHA1(PA_PluginParameters params);
void RSASHA256(PA_PluginParameters params);
void RSAVERIFYSHA1(PA_PluginParameters params);
void RSAVERIFYSHA256(PA_PluginParameters params);
void AES128(PA_PluginParameters params);
void AES192(PA_PluginParameters params);
void AES256(PA_PluginParameters params);
void SHA3_224(PA_PluginParameters params);
void SHA3_256(PA_PluginParameters params);
void SHA3_384(PA_PluginParameters params);
void SHA3_512(PA_PluginParameters params);
void SHAKE128(PA_PluginParameters params);
void SHAKE256(PA_PluginParameters params);
void HMACMD5(PA_PluginParameters params);
void HMACSHA1(PA_PluginParameters params);
void HMACSHA224(PA_PluginParameters params);
void HMACSHA256(PA_PluginParameters params);
void HMACSHA384(PA_PluginParameters params);
void HMACSHA512(PA_PluginParameters params);
void HMACSHA512_224(PA_PluginParameters params);
void HMACSHA512_256(PA_PluginParameters params);
void HMACSHA3_224(PA_PluginParameters params);
void HMACSHA3_256(PA_PluginParameters params);
void HMACSHA3_384(PA_PluginParameters params);
void HMACSHA3_512(PA_PluginParameters params);

void PBKDF2_HMAC_MD5(PA_PluginParameters params);
void PBKDF2_HMAC_SHA1(PA_PluginParameters params);
void PBKDF2_HMAC_SHA224(PA_PluginParameters params);
void PBKDF2_HMAC_SHA256(PA_PluginParameters params);
void PBKDF2_HMAC_SHA384(PA_PluginParameters params);
void PBKDF2_HMAC_SHA512(PA_PluginParameters params);

void PBKDF2_HMAC_SHA512_224(PA_PluginParameters params);
void PBKDF2_HMAC_SHA512_256(PA_PluginParameters params);

void PBKDF2_HMAC_SHA3_224(PA_PluginParameters params);
void PBKDF2_HMAC_SHA3_256(PA_PluginParameters params);
void PBKDF2_HMAC_SHA3_384(PA_PluginParameters params);
void PBKDF2_HMAC_SHA3_512(PA_PluginParameters params);

void PEMInfo(PA_PluginParameters params);
void DERToPEM(PA_PluginParameters params);
#endif /* PLUGIN_COMMON_CRYPTO_H */
